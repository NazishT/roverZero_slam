<?xml version="1.0"?>

<launch>

  <arg name="config_locks"  default="$(find rr_rover_zero_v2_driver)/config/twist_mux_locks.yaml"/>
  <arg name="config_topics" default="$(find rr_rover_zero_v2_driver)/config/twist_mux_topics.yaml"/>
  <arg name="node_name" default="rr_rover_zero_v2_driver_node" />

  <!-- Optionally launch in GDB, for debugging -->
  <arg name="debug" default="false" />
  <arg if="$(arg debug)" name="launch_prefix" value="xterm -e gdb --args" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />

  <!-- driver parameters -->
  <arg name="port" default="/dev/rover-zero-v2" /> <!-- /dev/rover-zero-v2" / -->
  <arg name="canaddress" default="8" />


  <!-- driver node -->
  <node pkg="rr_rover_zero_v2_driver" type="rr_rover_zero_v2_driver_node" name="$(arg node_name)"
        output="screen" launch-prefix="$(arg launch_prefix)" >
    <param name="port" value="$(arg port)" />
    <remap from="/cmd_vel" to="/cmd_vel/managed" />
  </node>

  <!--Twist Mux-->
  <node pkg="twist_mux" type="twist_mux" name="twist_mux" output="screen">
      <remap from="cmd_vel_out" to="/cmd_vel/managed"/>

      <rosparam file="$(arg config_locks)"  command="load"/>
      <rosparam file="$(arg config_topics)" command="load"/>
  </node>

  <!--     Control input manager-->
  <node pkg="rr_control_input_manager" type="control_input_manager.py" name="rr_control_input_manager_node" output="log" >
    <param name="driver" value="xboxdrv"/>
    <param name="wired_or_wireless" value="wireless"/>
    <rosparam file="$(find rr_control_input_manager)/config/input_topics.yaml" command="load"/>
  </node>
  
  <!-- PS4 Ubuntu Driver -->
    <include file="$(find ds4_driver)/launch/ds4_driver.launch" >
        <arg name="addr" value="" />
        <arg name="use_standard_msgs" value="false" />
    </include>

  <!-- PS4 Mapper -->
  <node pkg="rr_control_input_manager" type="ps4_mapper.py" name="ps4_mapper" output="screen" >
      <rosparam command="load" file="$(find rr_rover_zero_v2_driver)/config/ps4_controller_config.yaml" />
      <param name="stamped" value="True" />
  </node>

  <!-- Hokuyo Laserscanner -->
  <node name="urg_node" pkg="urg_node" type="urg_node" output="screen">
    	<param name="ip_address" value=""/>
    	<param name="serial_port" value="/dev/ttyACM0"/>
    	<param name="serial_baud" value="115200"/>
    	<param name="frame_id" value="laser"/>
    	<param name="calibrate_time" value="false"/>
    	<param name="publish_intensity" value="false"/>
    	<param name="publish_multiecho" value="false"/>
    	<param name="angle_min" value="-1.5707963"/>
    	<param name="angle_max" value="1.5707963"/>
   </node>

    <!-- Intel RealSense D435i Driver -->
    <!--include file="$(find realsense2_camera)/launch/rs_camera.launch" /-->

    <!-- Using EKF Localization --> 

   <include file="$(find rover_slam)/launch/robot_localization.launch"/>

    <!-- Robot Description --> 
   <arg name="config" default="4WD_Rover_with_SLAM_Pack" />
   <param name="robot_description"
           command="$(find rr_openrover_description)/scripts/env_run
                    $(find rr_openrover_description)/urdf/configs/$(arg config)
                    $(find xacro)/xacro $(find rr_openrover_description)/urdf/4WD_Rover/4WD_rover.urdf.xacro" />

   <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
   <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
 

    <!--Rviz-->
    <!--node name="rviz" pkg="rviz" type="rviz" args="-d $(find rover_slam)/rviz/rover_rviz.rviz" /-->


    <!-- SLAM -->
    <node name="gmapping" pkg="gmapping" type="slam_gmapping" output="screen"/>

    <!-- static tfs --> 
    <node pkg="tf" type="static_transform_publisher" name="chassis_link_to_laser" args="0 0 0 0 0 0 /chassis_link /laser 50"/>
    <node pkg="tf" type="static_transform_publisher" name="laser_to_map" args="0 0 0 0 0 0 /laser /map 50"/>

    <!-- Map server (if required) --> 
    <!--arg name="map_file" default="$(find rover_slam)/maps/herolab_map.yaml"/-->
    <!--node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)"/--> 

    <!-- AMCL (if required) -->

    <!--Move Base -->
    <include file="$(find rover_slam)/launch/move_base.launch"/>
    
</launch>
